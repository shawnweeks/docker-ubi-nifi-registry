# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# web properties #
nifi.registry.web.war.directory={{ NIFI_REGISTRY_WEB_WAR_DIRECTORY | default('./lib') }}
{% if NIFI_REGISTRY_WEB_HTTPS_ENABLE is not defined and NIFI_REGISTRY_WEB_HTTPS_ENABLE != 'true' %}
nifi.registry.web.http.host={{ NIFI_REGISTRY_WEB_HTTP_HOST | default(HOSTNAME) }}
nifi.registry.web.http.port={{ NIFI_REGISTRY_WEB_HTTP_PORT | default('18080') }}
{% else %}
nifi.registry.web.https.host={{ NIFI_REGISTRY_WEB_HTTPS_HOST | default(HOSTNAME) }}
nifi.registry.web.https.port={{ NIFI_REGISTRY_WEB_HTTPS_PORT | default('18443') }}
{% endif %}
nifi.registry.web.jetty.working.directory={{ NIFI_REGISTRY_WEB_JETTY_WORKING_DIRECTORY | default('./work/jetty') }}
nifi.registry.web.jetty.threads={{ NIFI_REGISTRY_WEB_JETTY_THREADS | default('200') }}
nifi.registry.web.should.send.server.version={{ NIFI_REGISTRY_WEB_SHOULD_SEND_SERVER_VERSION | default('true') }}

# security properties #
nifi.registry.security.keystore={{ NIFI_REGISTRY_SECURITY_KEYSTORE | default('') }}
nifi.registry.security.keystoreType={{ NIFI_REGISTRY_SECURITY_KEYSTORE_TYPE | default('') }}
nifi.registry.security.keystorePasswd={{ NIFI_REGISTRY_SECURITY_KEYSTORE_PASSWORD | default('') }}
nifi.registry.security.keyPasswd={{ NIFI_REGISTRY_SECURITY_KEY_PASSWORD | default('') }}
nifi.registry.security.truststore={{ NIFI_REGISTRY_SECURITY_TRUSTSTORE | default('') }}
nifi.registry.security.truststoreType={{ NIFI_REGISTRY_SECURITY_TRUSTSTORE_TYPE | default('') }}
nifi.registry.security.truststorePasswd={{ NIFI_REGISTRY_SECURITY_TRUSTSTORE_PASSWORD | default('') }}
nifi.registry.security.needClientAuth={{ NIFI_REGISTRY_SECURITY_NEED_CLIENT_AUTH | default('') }}
nifi.registry.security.authorizers.configuration.file={{ NIFI_REGISTRY_SECURITY_AUTHORIZERS_CONFIGURATION_FILE | default('./conf/authorizers.xml') }}
nifi.registry.security.authorizer={{ NIFI_REGISTRY_SECURITY_AUTHORIZER | default('managed-authorizer') }}
nifi.registry.security.identity.providers.configuration.file={{ NIFI_REGISTRY_SECURITY_IDENTITY_PROVIDERS_CONFIGURATION_FILE | default('./conf/identity-providers.xml') }}
nifi.registry.security.identity.provider={{ NIFI_REGISTRY_IDENTITY_PROVIDER | default('') }}

# sensitive property protection properties #
# nifi.registry.sensitive.props.additional.keys=

# providers properties #
nifi.registry.providers.configuration.file={{ NIFI_REGISTRY_PROVIDERS_CONFIGURATION_FILE | default('./conf/providers.xml') }}

# registry alias properties #
nifi.registry.registry.alias.configuration.file={{ NIFI_REGISTRY_REGISTRY_ALIAS_CONFIGURATION_FILE | default('./conf/registry-aliases.xml') }}

# extensions working dir #
nifi.registry.extensions.working.directory={{ NIFI_REGISTRY_EXTENSIONS_WORKING_DIRECTORY | default('./work/extensions') }}

# legacy database properties, used to migrate data from original DB to new DB below
# NOTE: Users upgrading from 0.1.0 should leave these populated, but new installs after 0.1.0 should leave these empty
nifi.registry.db.directory={{ NIFI_REGISTRY_DB_DIRECTORY | default('') }}
nifi.registry.db.url.append={{ NIFI_REGISTRY_DB_URL_APPEND | default('') }}

# database properties
nifi.registry.db.url={{ NIFI_REGISTRY_DB_URL | default('jdbc:h2:./database/nifi-registry-primary;AUTOCOMMIT=OFF;DB_CLOSE_ON_EXIT=FALSE;LOCK_MODE=3;LOCK_TIMEOUT=25000;WRITE_DELAY=0;AUTO_SERVER=FALSE') }}
nifi.registry.db.driver.class={{ NIFI_REGISTRY_DB_DRIVER_CLASS | default('org.h2.Driver') }}
nifi.registry.db.driver.directory={{ NIFI_REGISTRY_DB_DRIVER_DIRECTORY | default('') }}
nifi.registry.db.username={{ NIFI_REGISTRY_DB_USERNAME | default('nifireg') }}
nifi.registry.db.password={{ NIFI_REGISTRY_DB_PASSWORD | default('nifireg') }}
nifi.registry.db.maxConnections={{ NIFI_REGISTRY_DB_MAX_CONNECTIONS | default('5') }}
nifi.registry.db.sql.debug={{ NIFI_REGISTRY_DB_SQL_DEBUG | default('false') }}

# extension directories #
# Each property beginning with "nifi.registry.extension.dir." will be treated as location for an extension,
# and a class loader will be created for each location, with the system class loader as the parent
#
#nifi.registry.extension.dir.1=/path/to/extension1
#nifi.registry.extension.dir.2=/path/to/extension2

nifi.registry.extension.dir.aws={{ NIFI_REGISTRY_EXTENSION_DIR_AWS | default('./ext/aws/lib') }}

# Identity Mapping Properties #
# These properties allow normalizing user identities such that identities coming from different identity providers
# (certificates, LDAP, Kerberos) can be treated the same internally in NiFi. The following example demonstrates normalizing
# DNs from certificates and principals from Kerberos into a common identity string:
#
nifi.registry.security.identity.mapping.pattern.dn={{ NIFI_REGISTRY_SECURITY_IDENTITY_MAPPING_PATTERN_DN | default('') }}
nifi.registry.security.identity.mapping.value.dn={{ NIFI_REGISTRY_SECURITY_IDENTITY_MAPPING_VALUE_DN | default('') }}
# nifi.registry.security.identity.mapping.transform.dn=NONE

# nifi.registry.security.identity.mapping.pattern.kerb=^(.*?)/instance@(.*?)$
# nifi.registry.security.identity.mapping.value.kerb=$1@$2
# nifi.registry.security.identity.mapping.transform.kerb=UPPER

# Group Mapping Properties #
# These properties allow normalizing group names coming from external sources like LDAP. The following example
# lowercases any group name.
#
# nifi.registry.security.group.mapping.pattern.anygroup=^(.*)$
# nifi.registry.security.group.mapping.value.anygroup=$1
# nifi.registry.security.group.mapping.transform.anygroup=LOWER


# kerberos properties #
nifi.registry.kerberos.krb5.file={{ NIFI_REGISTRY_KERBEROS_KRB5_FILE | default('') }}
nifi.registry.kerberos.spnego.principal={{ NIFI_REGISTRY_KERBEROS_SPNEGO_PRINCIPAL | default('') }}
nifi.registry.kerberos.spnego.keytab.location={{ NIFI_REGISTRY_KERBEROS_SPNEGO_KEYTAB_LOCATION | default('') }}
nifi.registry.kerberos.spnego.authentication.expiration={{ NIFI_REGISTRY_KERBEROS_SPNEGO_AUTHENTICATION_EXPIRATION | default('12 hours') }}

# OIDC #
nifi.registry.security.user.oidc.discovery.url={{ NIFI_REGISTRY_SECURITY_USER_OIDC_DISCOVERY_URL | default('') }}
nifi.registry.security.user.oidc.connect.timeout={{ NIFI_REGISTRY_SECURITY_USER_OIDC_CONNECT_TIMEOUT | default('') }}
nifi.registry.security.user.oidc.read.timeout={{ NIFI_REGISTRY_SECURITY_USER_OIDC_READ_TIMEOUT | default('') }}
nifi.registry.security.user.oidc.client.id={{ NIFI_REGISTRY_SECURITY_USER_OIDC_CLIENT_ID | default('') }}
nifi.registry.security.user.oidc.client.secret={{ NIFI_REGISTRY_SECURITY_USER_OIDC_CLIENT_SECRET | default('') }}
nifi.registry.security.user.oidc.preferred.jwsalgorithm={{ NIFI_REGISTRY_SECURITY_USER_OIDC_PREFERRED_JWSALGORITHM | default('') }}

# revision management #
# This feature should remain disabled until a future NiFi release that supports the revision API changes
nifi.registry.revisions.enabled={{ NIFI_REGISTRY_REVISIONS_ENABLED | default('false') }}